//
// Test program for "get_coeff.cxx"
// Ken-Ichi Ishikawa [ishikawa[at]theo.phys.sci.hiroshima-u.ac.jp]
//
// See also: 
//  H. Haramoto, M. Matsumoto, T. Nishimura, F. Panneton, and P. L'Ecuyer, 
//   ``Efficient Jump Ahead for F_2-Linear Random Number Generators'', 
//  GERAD Report G-2006-62. INFORMS Journal on Computing, 20, 3 (2008), 385-390. 
//
// This routine uses;
//  Fast arithmetic in GF(2)[x], [http://wwwmaths.anu.edu.au/~brent/software.html]
//  NTL : A Library for doing Number Theory, [http://www.shoup.net/ntl/index.html]
//
//
// Copyright (c) 2010, Ken-Ichi Ishikawa [ishikawa[at]theo.phys.sci.hiroshima-u.ac.jp]
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
// * Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer. 
//   
// * Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer listed
//   in this license in the documentation and/or other materials
//   provided with the distribution.
//   
// * Neither the name of the copyright holders nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//   
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
// 

#include "stdio.h"
#include "math.h"
#include "get_coeff.h"

int main()
{
//#define _MT521_
#define _MT19937_
#ifdef _MT521_
  //
  // Mersenne Twister parameters (MT521)
  // Generated by Dynamic Creator (dcmt0.6.1)
  // [http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/DC/dc.html]
  //
  const int nn = 17;
  const int mm =  8;
  const int rr = 23;
  const int ww = 32;
  const int avec = -2111700990;
#endif

#ifdef _MT19937_
  //
  // Mersenne Twister parameters (MT19937)
  // Taken from 
  // [http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c]
  //
  const int nn = 624;
  const int mm = 397;
  const int rr = 31;
  const int ww = 32;
  const int avec = 0x9908b0df;
#endif

  const int period = nn*ww-rr;

  //
  // jump ahead steps exp. and id : (id)*2^nj steps;
  //
#ifdef _DEBUG_
  int nj = 256;
#else
  int nj = 20;
#endif
  int id = 31;

  //
  // jump polynomial coefficients pp (GF(2)[x])
  //
  unsigned int pp[nn];

  //
  // bit size of pp,  nb = (deg(pp))+1
  //
  int nb; 

  //
  // compute pp via g(x) = x^(id*2^nj) mod phi(x)
  //
  //  phi(x) : characteristic polynomial for MT(nn,mm,rr,ww,avec)
  //           (computed in get_coeff)
  //
  //  pp[] : g(x) = p(0) + p(1) x + p(2) x^2 ....+ p(nb-1) x^(nb-1)
  //       : p(i) => converted unsigned int vector pp[], 
  //       : (nb <= 32*nn)
  //
  get_coeff (nn,mm,rr,ww,avec,nj,id,pp,nb);

  //
  // Print Fortran90 style code.
  //
  int nar=(int)ceil((double)nb/(double)ww);
  printf("! MT%d\n",period);
  printf("! Jump Ahead %d*2^%d steps coefficnents\n",id,nj);
  printf("  integer, parameter :: id  = %d\n",id);
  printf("  integer, parameter :: nj  = %d\n",nj);
  printf("  integer, parameter :: nb  = %d\n",nb);
  printf("  integer, parameter :: nar = %d\n",nar);
  printf("  integer :: p(0:nar-1)\n");
  printf("  p(:)=0\n");
  for (int i=0;i<nar;i++) {
    printf("  p(%d)=Z'%x'\n",i,pp[i]);
  }
}
