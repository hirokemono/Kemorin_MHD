**********************************************************************
*     ISPACK利用の手引き (ver 0.93)           By 石岡圭一 (2010/09/22)
**********************************************************************
-----------------------------------------------------------------------
・概要
-----------------------------------------------------------------------

  このライブラリ(ISPACK)は, 主に簡単な流体方程式の数値計算に必要となる
基本的な道具(スペクトル変換, 時間積分, IO, 等)をサブルーチン群としてま
とめたものである. 各サブルーチンともできるだけ単独で使えることを目標と
して設計されているため, お気楽な統合環境では無いことに注意されたい. す
なわち, これらのサブルーチン群をどのように組み合わせて使うかはすべてユー
ザ次第である.

-----------------------------------------------------------------------
・著作権および使用許諾
-----------------------------------------------------------------------

  本ライブラリの著作権は石岡圭一に属する. また, 使用許諾については
COPYRIGHTファイルに書いてあるように, GNU LESSER GENERAL PUBLIC LICENSE
(LGPL)に従う. なお, 本ライブラリを用いて行った数値実験の結果等を論文に発
表する際には, 本ライブラリを用いたことを明記すること.

-----------------------------------------------------------------------
・構成
-----------------------------------------------------------------------

本パッケージは以下のようなディレクトリ構成になっている.

  - README: 本ファイル
  - CHANGELOG: 変更履歴
  - COPYRIGHT: 著作権を記述したファイル(英文)
  - LGPL: GNU LESSER GENERAL PUBLIC LICENSE (LGPL)
  - Makefile: Makefileの本体
  - Mkinclude: Makefileにおいて読み込まれるインクルードファイル
		(デフォルトでは, 通常の Linux環境に合わせてある).
  - Mkinclude.sub: 各サブディレクトリ内のMakefileにおいて読み込まれる
		   インクルードファイル

  - appack: 時刻計測ルーチン
  - bspack: 配列のコピー等の下層ルーチン群
  - fepack: 上位レベルのIOルーチン(機種依存性のないファイルIO)
  - fhpack: 下位レベルのIOルーチン(単純なIOルーチン群)
  - flpack: 実数の内部表現などを変換するフィルタールーチン群
  - ftpack: 高速Fourier変換を行うルーチン群
  - n2pack: Double-Fourierモデルのための変換ルーチン群
  - p2pack: n2packの改良版
  - pzpack: p2pack と同様の機能を fftj を使って実現したもの.  
  - p3pack: 周期境界条件3次元モデルのためのルーチン群
  - p3pack-mpi: p3packをMPIで並列化したもの
  - c2pack: チャネルモデルのための変換ルーチン群
  - stpack: 球面調和関数変換を行うルーチン群(一層モデル用省メモリ)  
  - smpack: 球面調和関数変換を行うルーチン群(多層モデル用高速化)
  - snpack: 球面調和関数変換を行うルーチン群(多層モデル用高速化兼省メモリ)
  - sjpack: 球面調和関数変換を行うルーチン群(スカラー計算機向け)
  - sjpack-cuda: sjpackの変換ルーチンをCUDA化したもの    
  - snpack-mpi: snpackをMPIで安直並列化したもの
  - sopack: 2次元非発散流体の運動方程式の非線形項を効率良く計算するルーチン
  - sopack-mpi: sopackをMPIで安直並列化したもの
  - sppack: snpack の応用ルーチン群
  - sppack-mpi: sppackをMPIで安直並列化したもの
  - tdpack: 時間積分のためのルーチン群(常微分方程式を解く)
  - dkpack: 円盤領域のスペクトル法のためのルーチン群(この中では
            LAPACK を利用しているので, これを含める場合は別途
	    LAPACKもインストールしておくこと)

  - sample: 上のサブルーチン群を用いて構成した流体実験の等のためのプロ
	    グラムの置き場所
	    
  - .fftj: 同梱している fftj-0.2 のディレクトリ. Makefile のみオリジナル
           の状態から書き換えてある.

なお, 各??packのディレクトリ以下には, 次のような2つのディレクトリがあ
る:

    src: 各サブルーチン群のソースを収めたディレクトリ
    doc: 各サブルーチン群のドキュメント(LaTeX形式)を収めたディレクトリ

ので, 必要に応じて参照されたい.

また, n2pack および stpack は旧バージョンとの互換性のために残して
ある obsolete なパッケージであるので, これらのパッケージの機能が必要な
新規のユーザは, 対応するより新しいパッケージ p2pack および snpack
(PCのようなスカラー計算機なら pzpack および sjpack)を使用されことを勧める.

-----------------------------------------------------------------------
・ライブラリのインストール方法
-----------------------------------------------------------------------
(※注: 以下, 様々な処理系に関する記述があるが, 作者は最近では Intel x86
CPU上の Linux 環境しか使っていないので, 他の処理系の最近の状況は把握して
いない. なので, もしそのような処理系でインストールが必要な場合は, それ
ぞれのフラグの意味などを十分把握して相応しい設定にすること)

  1) Mkincludeファイル内のマクロ定義を自分の環境に合わせて変更

      それぞれのマクロの意味は自明だとは思うが, 変更が必要となりうる項
    目についてだけ解説する.

    - DIRS: ライブラリ化したいパッケージを列挙する. デフォルトでは全パッ
         ケージになっているが, もし全パッケージが必要ない場合には, 必
         要なパッケージのみを書くこと(例えば, IOライブラリのみ必要な場
         合は, DIRS = flpack fhpack fepack だけでよい).

    - LIBNAME: 静的または共有ライブラリの名前. 重複するおそれがなければ,
	デフォルトの libisp のままでよい.

    - DESTDIR: 静的または共有ライブラリの置き場所のディレクトリ.

    - STATICLIB: 最終的に生成される静的ライブラリファイルのパス.

    - FC,FFLAGS: Fortranコンパイラ名および, 最適化のオプションなどのフ
	ラグ. 

    - MPIFC,MPIFFLAGS: Fortran77で書かれたMPIプログラムをコンパイル
        するためのコンパイラ名および, それに対応する最適化のオプション
	などのフラグ.
	
    - DCLFRT: sample ディレクトリ中のサンプルプログラムでは描画に
         dcl (http://www.gfd-dennou.org/arch/dcl/) を用いるので, 
	 dcl のライブラリをリンクするコンパイラ名(通常は dclfrt)
	 を指定する( ispack のインストール自体には dcl は必要ない).
	 なお, サンプルプログラムでは dclのアニメーション表示を
	 するので, /etc/X11/xorg.conf の "Screen" セクションに
           Option "Backingstore" "on" を追加しておくこと.
	   
    - SSE: 同梱されている fftj および sjpack を make する際に与えるオプション.
        環境に合わせて以下のいずれかを指定する.
         * SSE2命令を持つ ntel x86 互換CPU(Pentium4以降)上の 32bit Linux 環境:
	     → sse32
         * SSE2命令を持つ ntel x86 互換CPU(Pentium4以降)上の 64bit Linux 環境:
	     → sse64
	 * 上記以外
	     → fort
	fftjについての詳細は .fftj/README を参照.

    - RANLIB: SysV系など, ranlibが必要ないシステムにおいては, touch等
	に変更すること.

    - CPPFLAGS:	IOルーチンfhpack, fepack, および時刻計測ルーチンappack
        で使われるフラグ. 各機種の性質に応じて指定すること. これらのルー
        チン群を使わなければデフォルトのままで構わない.

       i) IOの仕方に関するフラグ

          UNIX系OS等で, 直接参照入出力が問題無い場合は
  	
		-DDIRECT 

	  を指定. それ以外の場合(例えば, メインフレーム系等で直接参照
	  入出力がうまくできない場合など)には

		-DSEQUENTIAL

	  を指定すること. また, 直接参照入出力が問題無くとも, 書式なし
	  だと問題を生ずる場合もある(Linux でも ifort を使っている場合
	  や,  NEC の SX や, DEC の alpha 等)
	  ので, そのような機種では, -DDIRECTに加えて

	        -DFORMAT

	  を追加すること.

       ii) 実数の内部表現に関するフラグ

	   その機種の実数の内部表現に合せて,

	        -DIEEE (IEEE表現) または -DIBM (IBM表現またはM形式)

	   のいずれかを指定すること.

       iii) 文字の内部表現に関するフラグ

	   その機種の文字の内部表現に合せて,

	        -DASCII (ASCIIコード) または -DEBCDIC (EBCDICコード)

	   のいずれかを指定すること.

       iv) 整数および実数のエンディアンに関するフラグ

	   その機種がリトルエンディアンである場合には,

 		-DLEN

	   を指定すること. ビッグエンディアンなら何も指定しなくてよい.

       v) 時刻計測ルーチンに関するフラグ

	  その処理系に時刻計測ルーチンがサービスサブルーチンとして組込
	  まれている場合に指定する. 現在のところ, 組込み関数ETIMEのある
          SUN-FORTRANおよびg77, MSP(VP,VPPを含む), SX3, SX4
	  での利用が可能である. それぞれに対応して, 

	        -DET, -DFUJITSU, または -DNEC

          を指定すること. 何も指定しなければ, 時刻計測ルーチンはダミー
          となる.

       vi) snpack内の最適化に関するフラグ

	  球面調和関数変換パッケージ snpack 内の変換ルーチン snt.f
	  内で, 最もコストがかかる部分について, SX4ではそのままでは
	  十分最適化できないため, ループの分割をしてアンローリングを
	  促進してあげる必要がある. そのためには

	        -DSPLIT

          を指定すること. これにより SX4 での実行速度が向上するはず
	  である. ただし富士通の VPP などのコンパイラは十分賢く, 
	  この分割はかえって有害になるので, 指定しないこと.
	  
	  なお, snpackなどの数値計算関係のパッケージは全般的にできるだけ
	  ベクトル化しやすくコーディングしているが, SXにおける f77 コンパ
	  イラのように勝手にループの入れ替え最適化をしてしまうコンパイラ
	  もあり, そのようなことをされると折角のコーディングが台無しに
	  なって実行速度が極端に低下してしまう. したがって, ベクトル計算機
	  でのコンパイルの際にはループ並べ替えの最適化を行わない設定にする
	  こと(ちなみに, 富士通の frt や NEC の f90 コンパイラはそんな変
	  なことをしないようなので大丈夫である).
	  
       vii) fftw の利用

          一般のスカラー計算機においては, FFTの計算は FTPACKより fftw
	  (http://www.fftw.org/) の方が悔しいが通常圧倒的に速い.
	  そこで, p2pack の変換ルーチン(p2s2ga, p2g2sa)の計算に fftw
	  を用いるように書き換えたものも用意して, ユーザがスィッチでき
	  るようにした. もし fftw を利用したものの方を使いたい場合には,
	  
	        -DFFTW2
		
	  を指定すること. ちなみに, この fftwを利用した p2s2ga, p2g2sa
	  については, OpenMPでの並列化もされている.
	  
	  なお, 都合により, 利用している fftw はバージョン2 の方である
	  ので注意すること(バージョン3はインターフェースが異なっている).
	  
	  また, fftw は初期に数回の FFT を実行して時刻計測を行い, 最適な
	  モジュールの組み合わせを選択できる機能がある. これを利用すると,
	  初回の呼出しには相応の時間がかかるが, それ以後はこの計測をしな
	  い場合に比べて若干高速になる筈である. この機能を利用する場合に
	  は, さらに, 
	  
	        -DMEASURE
		
	  を指定すること.
	  
       ※指定例)
       
	  - AT互換機をLinux等のOSでg77を使っている場合:

		CPPFLAGS = -DDIRECT -DIEEE -DASCII -DLEN -DET

	  - AT互換機をLinux等のOSでifortを使っている場合:

		CPPFLAGS = -DDIRECT -DIEEE -DASCII -DLEN -DET -DFORMAT

  2) このREADMEのあるディレクトリにおいて,

	% make

      以上でDESTDIRで指定したディレクトリ以下にライブラリ libisp.a
      が作成されるはずである.

      ※ make 中にいくつかのパッケージ, 特に I/O まわり (fhpack,
      fepack, flpack など)で文法違反のワーニングが出ることがあるが,
      通常問題ないはずなので, 気にしないこと.

  3) ライブラリ作成後, 不要となったオブジェクトファイルを掃除したい場
     合は,

	% make clean

      とすればよい. また,

	% make veryclean

      とするとライブラリおよびパッケージファイルも消去され, make前の状
    態に戻る. CPPFLAGSのオプション等を間違えた場合は, これによって最初
    からインストールをやりなおすこと.

-----------------------------------------------------------------------
・ライブラリの使い方
-----------------------------------------------------------------------

  上で生成されたライブラリ(libisp.a)は, 通常のFORTRAN77のライブラリで
あるので, 適宜メインプログラムのコンパイル時にリンクしていただければ使
用可能である. 具体的な使用例はsampleディレクトリ以下を参考にされたい.

-----------------------------------------------------------------------
・サンプル集について
-----------------------------------------------------------------------

  本ライブラリを用いて構成された簡単な流体実験等のためのサンプルプログ
ラムを sample ディレクトリ以下にそれぞれディレクトリに分けて置いてある.
現在のところ, 以下のようなものがある.

 - 3D-box: 3次元非圧縮流体実験のためのプログラム(3次元周期境界条件)
 
 - 3D-box-mpi: 3D-box のプログラムを MPIで並列化したもの

 - 2D-plane: 2次元流実験のためのプログラム(平面-ダブルピリオディック
             境界条件)

 - 2D-channel: 2次元流実験のためのプログラム(平面-スリップチャネル
             境界条件)

 - 2D-disk-inviscid-shallow: 2次元流実験のためのプログラム
                             (円盤領域の非粘性浅水方程式)

 - non-div-2d-sphere: 2次元非発散流実験のためのプログラム(球面)
 
 - shallow-water-sphere: 浅水方程式実験のためのプログラム(球面)

 - IO: f[ehl]packを用いたIOのサンプルプログラム
 
 - snpack-openmp-test: OpenMP によって並列化された snpack 中の変換
                       ルーチンのテストプログラム

 - sjpack-test: sjpack のテストプログラム
 
 - sjpack-cuda-test: sjpack-cuda のテストプログラム

それぞれの利用方法については, 各ディレクトリ以下にあるMEMOファイルを参
照されたい.

-----------------------------------------------------------------------
・並列化について
-----------------------------------------------------------------------

  MPIで並列化されたパッケージ(現在は p3pack-mpi, snpack-mpi, sppack-mpi, 
sopack-mpi)を使用する場合には, コンパイラや実行コマンドなどについて各処
理系におけるMPIのマニュアルを参照のこと. なお, 並列化されたパッケージの
ライブラリの具体的な呼出し方などについては, サンプルプログラム(現在は 
3D-box-mpi, non-div-2d-sphere-mpi, shallow-water-sphere-mpi)を参考にされ
たい.

  また, p3pack-mpi では プロセス数が 1024 以下であることを仮定している.
もし 1024 より多くのプロセス数になりうる場合は, p3pack-mpi/src/
以下にあるプログラム中で
      PARAMETER(MP=1024)
として設定されているMPの値を適宜変更してライブラリを再構築すること.

  OpenMPで並列化されたパッケージ(現在は p2pack の fftw版, snpack,  
pzpack, および sjpack)を使用する場合には, コンパイラオプションの設定や
実行時の環境変数の設定などについて各処理系におけるマニュアルを参照のこと.

-----------------------------------------------------------------------
・CUDA版について
-----------------------------------------------------------------------

  Nvidia社製のGPGPU上での利用を想定して, 球面調和関数変換のパッケージ
sjpackの一部の変換ルーチンをCUDA化したものを sjpack-cuda として追加した.
詳細については sjpack-cuda/doc 以下にあるドキュメントを参照されたい.

  なお, この sjpack-cuda はデフォルトではライブラリに含めない設定になっ
ているため, 利用する際には, Mkinclude 中で変数 NVCC と NVCFLAGS を適切
に設定した上で, 変数 DIRS に sjpack-cuda を追加してから make すること.

-----------------------------------------------------------------------
・その他
-----------------------------------------------------------------------

  このパッケージに対するバグレポートや意見はE-mailで

     ishioka@gfd-dennou.org

までお寄せいただきたい.
