
#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

# AC_PREREQ(2.61)
AC_INIT(FULL-PACKAGE-NAME, VERSION, BUG-REPORT-ADDRESS)

AM_INIT_AUTOMAKE
AM_CONDITIONAL([am__fastdepOBJC], false)
AM_CONDITIONAL([am__fastdepCXX], false)


dnl Include Fortran related definitions
builtin(include,MHD/confdb/aclocal_fc.m4)

dnl Include OpenMP related definitions
builtin(include,MHD/confdb/ax_pthread.m4)
builtin(include,MHD/confdb/ax_openmp.m4)

dnl Include MPI related definitions
builtin(include,MHD/confdb/ax_mpi.m4)

dnl Include OpenGL Check related definitions
builtin(include,MHD/confdb/ax_have_opengl.m4)

dnl Include gmake Check related definitions
builtin(include,MHD/confdb/check_gnu_make.m4)

dnl Include BLAS library check
builtin(include,MHD/confdb/ax_blas.m4)
builtin(include,MHD/confdb/ax_blas_f77_func.m4)

builtin(include,MHD/confdb/ax_check_gl.m4)
builtin(include,MHD/confdb/ax_check_glu.m4)
builtin(include,MHD/confdb/ax_check_glut.m4)
#
dnl Include zlib Check related definitions
builtin(include,MHD/confdb/ax_check_zlib.m4)
dnl Include pgplot Check related definitions
builtin(include,MHD/confdb/ax_check_pgplot.m4)
dnl Include hdf5 Check
builtin(include,MHD/confdb/ax_lib_hdf5.m4)
#
dnl Include Aquaterm Check
builtin(include,MHD/confdb/ax_check_aquaterm.m4)
#
dnl Include pkg-config Check
builtin(include,MHD/confdb/pkg.m4)
#

AC_CONFIG_SRCDIR([MHD/programs/SPH_MHD/main_sph_MHD.f90])
# AC_CONFIG_HEADER([config.h])

AC_ARG_ENABLE(cocoa,
	[  --enable-cocoa          Use Cocoa framework],[USE_Cocoa='yes'],[USE_Cocoa='no'])

AC_ARG_ENABLE(fftw3,
	[  --enable-fftw3          Use fftw3 library],[USE_fftw3='yes'],[USE_fftw3='no'])

AC_ARG_ENABLE(libpng,
	[  --enable-libpng         Use libpng library],[USE_libpng='yes'],[USE_libpng='no'])

AC_ARG_ENABLE(gl,
	[  --enable-gl             Use OpenGL for viewer],[USE_gl='yes'],[USE_gl='no'])

AC_ARG_ENABLE(glui,
	[  --enable-glui           Use glui GUI framework],[USE_glui='yes'],[USE_glui='no'])

AC_ARG_ENABLE(gtk,
	[  --enable-gtk            Use gtk+ GUI framework],[USE_gtk='yes'],[USE_gtk='no'])


AC_MSG_RESULT(enable-cocoa... "${USE_Cocoa}")
AC_MSG_RESULT(enable-OpenGL.. "${USE_gl}")
AC_MSG_RESULT(enable-glui...  "${USE_glui}")

AC_MSG_RESULT(enable-fftw3... "${USE_fftw3}")
AC_MSG_RESULT(enable-libpng..."${USE_libpng}")
AC_MSG_RESULT(enable-gtk...  "${USE_gtk}")

AC_MSG_RESULT(with-blas...     "${with_blas}")
AC_MSG_RESULT(with-zlib...     "${with_zlib}")
AC_MSG_RESULT(with-aquaterm... "${with_aquaterm}")
AC_MSG_RESULT(with-pgplot...   "${with_pgplot}")

# Checks for programs.
AC_PROG_CC
AC_PROG_FC

if test -z ${AR}
then
	ar_bin="ar"
else
	ar_bin="${AR}"
fi
AC_SUBST(ar_bin)

AC_PROG_MAKE_SET
AC_PROG_RANLIB

#GNU make check
CHECK_GNU_MAKE()
GMAKE=$_cv_gnu_make_command
AC_SUBST(GMAKE)
AC_MSG_RESULT(GNU MAKE... "${GMAKE}")

# libtool check
PKG_PROG_PKG_CONFIG

# Checks using C compiler
AC_LANG_SAVE
AC_LANG(C)
# Check OpenMP
AX_OPENMP
AC_SUBST(OPENMP_CFLAGS)
# Check MPI
AX_MPI
AC_LANG_RESTORE

# Checks using Fortran Compiler
AC_LANG_SAVE
AC_LANG(Fortran)
# Check OpenMP
AX_OPENMP
AC_SUBST(OPENMP_FCFLAGS)
# Check MPI
AX_MPI
AC_LANG_RESTORE
AC_SUBST(MPIDIR)
AC_SUBST(MPILIBS)
AC_SUBST(MPIINCDIR)


# hdf5 check
AX_LIB_HDF5(parallel)
AC_MSG_RESULT(HDF5_LDFLAGS... "${HDF5_LDFLAGS}")
AC_MSG_RESULT(HDF5_PFLIBS... "${HDF5_PFLIBS}")

# Check BLAS
if test -n "${with_blas}"; then
    AX_BLAS
#   AX_BLAS_F77_FUNC
fi
AC_SUBST(BLAS_LIBS)

#
#  Check subroutien name for Fortran-C connection
# 
enable_connect_to_c="no"
if test ${USE_fftw3} = "yes"
then
  enable_connect_to_c="yes"
fi
if test ${USE_libpng} = "yes"
then
  enable_connect_to_c="yes"
fi
if test ${with_zlib} != "no"
then
  enable_connect_to_c="yes"
fi
AC_MSG_RESULT(enable_connect_to_c..."${enable_connect_to_c}")


if test ${enable_connect_to_c} = "yes"
then
	PAC_PROG_FC_NAME_MANGLE
	DFC_NAME_MANGLE="-D${FC_NAME_MANGLE}"
	AC_SUBST(DFC_NAME_MANGLE)
	AC_MSG_RESULT(DFC_NAME_MANGLE..."${DFC_NAME_MANGLE}")

# Checks for header files.
	AC_HEADER_STDC
	AC_CHECK_HEADERS([stdlib.h string.h])

# Checks for typedefs, structures, and compiler characteristics.
	AC_HEADER_STDBOOL
	AC_C_CONST

# Checks for library functions.
	AC_FUNC_MALLOC
	AC_CHECK_FUNCS([floor memset sqrt strrchr strtol])

# FFTW3 check
	if test ${USE_fftw3} = "yes"
	then
		PKG_CHECK_MODULES([FFTW3], fftw3, have_fftw3=yes, AC_MSG_ERROR(Cannot find FFTW 3.x))
	fi

# Check zlib
	AX_CHECK_ZLIB
	ZLIB_CFLAGS="${CPPFLAGS}"
	ZLIB_LIB="${LDFLAGS} ${LIBS}"
	AC_SUBST(ZLIB_CFLAGS)
	AC_SUBST(ZLIB_LIB)

# Check libpng
	if test ${USE_libpng} = "yes"
	then
	PKG_CHECK_MODULES([PNG], libpng, have_libpng=yes, AC_MSG_ERROR(Cannot find libpng))
	echo "have_libpng=$have_libpng"
	fi
	if test ${have_libpng} = "yes"
	then
		PKGFLAGS_PNG="png"
	else
		PKGFLAGS_PNG=""
		PNG_CFLAGS=""
		PNG_LIBS=""
	fi
	AC_SUBST(PKGFLAGS_PNG)
	AC_SUBST(PNG_CFLAGS)
	AC_SUBST(PNG_LIBS)
fi

# Checks for Xwindow
	AC_PATH_X
	AC_PATH_XTRA
	X_LIBS="${X_LIBS} -lX11"
	AC_SUBST(X_LIBS)
	AC_SUBST(X_CFLAGS)

# Checks for Cocoa framework
if test ${USE_Cocoa} = "yes"
then
	X_LIBS="-L/usr/X11/lib -lX11"
	AC_SUBST(X_LIBS)
	
	USE_gl = "yes"

	GL_LIBS="-framework GLUT -framework OpenGL  -framework Cocoa"
	GL_INC="-I/usr/X11/include"
	COCOA_FLAG="-D__APPLE__"
# Check Aquaterm
	LIBS=""
	AX_CHECK_AQUATERM
	AC_SUBST(HAVE_LIBAQUATERM)
	AQUATERM_LIBS="-L${AQUATERM_HOME}/lib ${LIBS} -Wl,-framework -Wl,Foundation"
	AC_MSG_RESULT(AQUATERM_LIBS: ${AQUATERM_LIBS})
else
	COCOA_FLAG=""
# Checks for OpenGL
	if test ${USE_gl} = "yes"
	then
#        AX_CHECK_GL
#        AX_CHECK_GLU
#        AX_CHECK_GLUT

		AX_HAVE_OPENGL
		AC_MSG_RESULT(GL_CFLAGS... "${GL_CFLAGS}")
		AC_MSG_RESULT(CPPFLAGS... "${CPPFLAGS}")
		GL_INC="${GL_CFLAGS} -I/usr/X11/include"
	fi
	AQUATERM_LIBS=""
fi
AC_SUBST(COCOA_FLAG)
AC_SUBST(GL_LIBS)
AC_SUBST(GL_INC)
AC_SUBST(AQUATERM_LIBS)

if test ${USE_gl} = "yes"
then
# Check GLUI
	if test ${USE_glui} = "yes"
	then
		AC_PROG_CXX
	else
		CXX=""
	fi
	
# Check GTK+2
	if test ${USE_gtk} = "yes"
	then
		PKG_CHECK_MODULES([GTK2], gtk+-2.0, have_gtk=yes, AC_MSG_ERROR(Cannot find GTK+ 2.0))
		echo "have_gtk=$have_gtk"
	fi
	
	if test ${have_gtk} = "yes"
	then
		PKGFLAGS_GTK="gtk+-2.0"
	else
		PKGFLAGS_GTK=""
	fi
else
	CXX=""
	PKGFLAGS_GTK=""
	GTK2_CFLAGS=""
	GTK2_LIBS=""
fi

AC_SUBST(CXX)
AC_SUBST(CXXFLAGS)

AC_SUBST(PKGFLAGS_GTK)
AC_SUBST(GTK2_CFLAGS)
AC_SUBST(GTK2_LIBS)

# Check pgplot for Fortran compiler
LIBS="${PNG_LIBS} ${X_LIBS} ${AQUATERM_LIBS}"
LDFLAGS=""
AX_CHECK_PGPLOT
AC_SUBST(HAVE_LIBPGPLOT)
AC_MSG_RESULT(LIBS... "${LIBS}")
if test -n "${LIBS}"
	then
	PGPLOT_LIBS="${LDFLAGS} ${LIBS}"
fi
AC_SUBST(PGPLOT_LIBS)


AC_MSG_RESULT()
AC_MSG_RESULT(-----   Configuration summary   -------------------------------)
AC_MSG_RESULT()
if test -n "${OPENMP_FCFLAGS}"; then
        AC_MSG_RESULT(    Use OpenMP ...        yes)
else
        AC_MSG_RESULT(    Use OpenMP ...         no)
fi
if test -n "${COCOA_FLAG}"; then
        AC_MSG_RESULT(    Use Cocoa...          yes)
else
        AC_MSG_RESULT(    Use Cocoa...           no)
fi
if test -n "${X_LIBS}"; then
        AC_MSG_RESULT(    Use X Window...       yes)
else
        AC_MSG_RESULT(    Use X Window...        no)
fi
AC_MSG_RESULT()
if test -n "${BLAS_LIBS}"; then
        AC_MSG_RESULT(    Use BLAS ...          yes)
else
        AC_MSG_RESULT(    Use BLAS ...           no)
fi
AC_MSG_RESULT()
if test -n "${FFTW3_LIBS}"; then
        AC_MSG_RESULT(    Use FFTW3 ...         yes)
else
        AC_MSG_RESULT(    Use FFTW3 ...          no)
fi
if test -n "${HDF5_PFLIBS}"; then
        AC_MSG_RESULT(    Use parallel HDF5 ... yes)
else
        AC_MSG_RESULT(    Use parallel HDF5 ...  no)
fi
AC_MSG_RESULT()
if test -n "${ZLIB_LIB}"; then
        AC_MSG_RESULT(    Use zlib ...          yes)
else
        AC_MSG_RESULT(    Use zlib ...           no)
fi
if test -n "${PNG_LIBS}"; then
        AC_MSG_RESULT(    Use PNG output...     yes)
else
        AC_MSG_RESULT(    Use PNG output...      no)
fi
AC_MSG_RESULT()
if test -n "${CXX}"; then
        AC_MSG_RESULT(    Use GLUI...           yes)
else
        AC_MSG_RESULT(    Use GLUI...            no)
fi
if test -n "${GTK2_LIBS}"; then
        AC_MSG_RESULT(    Use GTK2+...          yes)
else
        AC_MSG_RESULT(    Use GTK2+...           no)
fi
if test -n "${PGPLOT_LIBS}"; then
        AC_MSG_RESULT(    Use PGPLOT...         yes)
else
        AC_MSG_RESULT(    Use PGPLOT...          no)
fi
if test -n "${AQUATERM_LIBS}"; then
        AC_MSG_RESULT(    Use Aquaterm...       yes)
else
        AC_MSG_RESULT(    Use Aquaterm...        no)
fi
AC_MSG_RESULT()
AC_MSG_RESULT(---------------------------------------------------------------)
AC_MSG_RESULT()



AC_CONFIG_FILES([Makefile])
AC_OUTPUT
